import abc
from concurrent.futures import ThreadPoolExecutor as _ThreadPoolExecutor
from threading import Event as _Event

class RpcContext(abc.ABC): ...
class Channel(abc.ABC): ...
class ServicerContext(RpcContext, metaclass=abc.ABCMeta): ...

class Server(abc.ABC):
    def add_insecure_port(self, address: str) -> int: ...
    def start(self) -> None: ...
    def stop(self, grace: float | None) -> _Event: ...

def server(
    thread_pool: _ThreadPoolExecutor,
    handlers: None = None,
    interceptors: None = None,
    options: None = None,
    maximum_concurrent_rpcs: None = None,
    compression: None = None,
    xds: bool = False,
) -> Server: ...
